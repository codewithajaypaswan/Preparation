class Solution {
public:
    vector<int>parent, size;
    int find(int u) {
        if(parent[u] == -1) return u;
        return parent[u] = find(parent[u]);
    }
    
    void _union(int pu, int pv) {
        if(pu == pv) return;
        if(size[pu] > size[pv]) {
            size[pu] += size[pv];
            parent[pv] = pu;
        }
        else {
            size[pv] += size[pu];
            parent[pu] = pv;
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parent.resize(n, -1);
        size.resize(n, 1);
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(graph[i][j]) {
                    int pu = find(i);
                    int pv = find(j);
                    _union(pu, pv);
                }
            }
        }
        
        vector<int>cntInfected(n, 0);
        for(auto i:initial) {
            int p = find(i);
            cntInfected[p]++;
        }
        int maxInfected = -1e9, ans = 1e9;
        for(int i:initial) {
            int p = find(i);
            if(cntInfected[p] == 1 && maxInfected <= size[p]) {
                if(maxInfected == size[p]) {
                    ans = min(ans, i);
                }
                else {
                    ans = i;
                }
                maxInfected = size[p];
            }
        }
        if(ans == 1e9) return *min_element(initial.begin(), initial.end());
        return ans;
    }
};